'use client';
import React, { useState, useEffect } from 'react';
import { IoClose, IoShieldCheckmarkOutline } from "react-icons/io5";
import axios from 'axios';
import { FaSearch, FaFilter, FaInfoCircle } from "react-icons/fa";
import Link from 'next/link';

export default function LayOutComp() {
  const [vacancies, setVacancies] = useState([]);
  const [categories, setCategories] = useState([]);
  const [cities, setCities] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(localStorage.getItem('selectedCategory') || '');
  const [selectedCity, setSelectedCity] = useState(localStorage.getItem('selectedCity') || '');
  const [salary_from, setSalaryFrom] = useState(localStorage.getItem('salary_from') || '');
  const [salary_to, setSalaryTo] = useState(localStorage.getItem('salary_to') || '');
  const [format, setFormat] = useState(localStorage.getItem('format') || '');
  const [schedule, setSchedule] = useState(localStorage.getItem('schedule') || '');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [uzbekistanAreaId, setUzbekistanAreaId] = useState(null);

  useEffect(() => {
    const fetchCategoriesAndCities = async () => {
      try {
        const categoriesRes = await axios.get('https://api.hh.ru/professional_roles');
        const categoriesData = categoriesRes.data?.categories || [];
        setCategories(Array.isArray(categoriesData) ? categoriesData : []);

        const citiesRes = await axios.get('https://api.hh.ru/areas');
        const allAreas = citiesRes.data;
        const uzbekistan = allAreas.find((area) => area.name.toLowerCase().includes('узбекистан'));
        if (uzbekistan) {
          setUzbekistanAreaId(uzbekistan.id);
          setCities(uzbekistan.areas || []);
        }
      } catch (error) {
        console.error('Ошибка при загрузке данных для фильтрации:', error);
        setCategories([]);
        setCities([]);
      }
    };

    fetchCategoriesAndCities();
  }, []);

  useEffect(() => {
    const fetchVacancies = async () => {
      try {
        const params = {
          page: page - 1,
          per_page: 10,
        };
        if (selectedCategory) params.professional_role = selectedCategory;
        if (salary_from) params.salary_from = salary_from;
        if (salary_to) params.salary_to = salary_to;
        if (format) params.employment = format;
        if (schedule) params.schedule = schedule;
        if (searchTerm) params.text = searchTerm;
        if (selectedCity) {
          params.area = selectedCity;
        } else if (uzbekistanAreaId) {
          params.area = uzbekistanAreaId;
        }

        const { data } = await axios.get('https://api.hh.ru/vacancies', { params });

        setVacancies(data.items || []);
        setTotalPages(Math.ceil((data.found || 0) / 10));
      } catch (error) {
        console.error('Ошибка при загрузке вакансий:', error);
      }
    };

    fetchVacancies();
  }, [page, selectedCategory, salary_from, salary_to, format, schedule, searchTerm, selectedCity, uzbekistanAreaId]);

  const handleSaveFilters = () => {
    localStorage.setItem('selectedCategory', selectedCategory);
    localStorage.setItem('selectedCity', selectedCity);
    localStorage.setItem('salary_from', salary_from);
    localStorage.setItem('salary_to', salary_to);
    localStorage.setItem('format', format);
    localStorage.setItem('schedule', schedule);
    setIsModalOpen(false);
  };

  const handleResetFilters = () => {
    localStorage.clear();
    setSelectedCategory('');
    setSelectedCity('');
    setSalaryFrom('');
    setSalaryTo('');
    setFormat('');
    setSchedule('');
  };

  const currencySymbols = {
    RUR: '₽',
    RUB: '₽',
    USD: '$',
    EUR: '€',
    UZS: 'сум',
  };

  return (
    <div className="layout">
      <div className="vacancy">
        <div className="filters">
          <div className="filters-blok">
            <div className="filters-blok__section-1">
              <input
                type="search"
                placeholder="Поиск по вакансиям"
                onChange={(e) => setSearchTerm(e.target.value)}
              />
              <FaSearch className="filters-blok__section-1__icon" />
            </div>

            <div className='filters-blok__section-2' onClick={() => setIsModalOpen(true)}>
              <p>Фильтры</p>
              <FaFilter className='filters-blok__section-2__icon' />
            </div>
          </div>
        </div>
      </div>
      {isModalOpen && (
        <div className="filters-modal">
          <div className="filters-modal__content">
            <div className="filters-modal-blok">
              <div className="filters-blok__content__header">
                <h3>Фильтры</h3>
                <IoClose className='filters-modal__close' onClick={() => setIsModalOpen(false)} />
              </div>
              <div className="filters-modal__section filters-modal__section-1">
                <select value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}>
                  <option value="">Категория</option>
                  {categories.map((category) => (
                    <option key={category.id} value={category.id}>
                      {category.name}
                    </option>
                  ))}
                </select>
                <select value={selectedCity} onChange={(e) => setSelectedCity(e.target.value)}>
                  <option value="">Город</option>
                  {cities.map((city) => (
                    <option key={city.id} value={city.id}>{city.name}</option>
                  ))}
                </select>
              </div>
              <div className="filters-modal__section filters-modal__section-2">
                <select value={format} onChange={(e) => setFormat(e.target.value)}>
                  <option value="">Формат работы</option>
                  <option value="full">Полная занятость</option>
                  <option value="part">Частичная занятость</option>
                </select>
                <select value={schedule} onChange={(e) => setSchedule(e.target.value)}>
                  <option value="">График работы</option>
                  <option value="full">Полный день</option>
                  <option value="flexible">Гибкий график</option>
                </select>
              </div>
              <div className="filters-modal__section">
                <div>
                  <label>Зарплата от:</label>
                  <input type="number" value={salary_from} onChange={(e) => setSalaryFrom(e.target.value)} placeholder="Минимальная зарплата" />
                </div>
                <div>
                  <input type="number" value={salary_to} onChange={(e) => setSalaryTo(e.target.value)} placeholder="Максимальная зарплата" />
                </div>
              </div>
              <div className="filters-modal__footer">
                <button className='filter-modal__footer__button1' onClick={handleSaveFilters}>Сохранить фильтры</button>
                <button className='filter-modal__footer__button2' onClick={handleResetFilters}>Сбросить</button>
              </div>
            </div>
          </div>
        </div>
      )}
      {vacancies.length === 0 ? (
        <p>Нет вакансий по данным фильтрам</p>
      ) : (
        <div className="vacancy__cards">
          {vacancies.map((vacancy) => (
            <div key={vacancy.id} className="vacancy__card">
              <div className="vacancy__card__header">
                <Link href={`/vacancy/${vacancy.id}`}>
                  <h3>{vacancy.name}</h3>
                </Link>
              </div>
              <div className="vacancy__card__section-1">
                <p>
                  Зарплата: {vacancy.salary
                    ? vacancy.salary.from && vacancy.salary.to
                      ? `${vacancy.salary.from.toLocaleString()} - ${vacancy.salary.to.toLocaleString()} ${currencySymbols[vacancy.salary.currency] || vacancy.salary.currency}`
                      : vacancy.salary.from
                        ? `${vacancy.salary.from.toLocaleString()} ${currencySymbols[vacancy.salary.currency] || vacancy.salary.currency}`
                        : vacancy.salary.to
                          ? `${vacancy.salary.to.toLocaleString()} ${currencySymbols[vacancy.salary.currency] || vacancy.salary.currency}`
                          : 'Не указано'
                    : 'Не указано'}
                </p>
              </div>
              <div className="vacancy__card__section-2">
                <div className="vacancy__card__section-2__part">
                  <a href={`https://hh.ru/employer/${vacancy.employer.id}`} target="_blank" rel="noopener noreferrer">
                    {vacancy.employer.name}
                  </a>
                  <IoShieldCheckmarkOutline className='vacancy__card__section-2__icon' />
                </div>
                <div className="vacancy__card__section-2__part"><p>{vacancy.area.name}</p></div>
              </div>
              <div className="vacancy__card__footer">
                <a href={vacancy.alternate_url} target="_blank" rel="noopener noreferrer">
                  <button className="vacancy__button">Отклик в hh</button>
                </a>
                <Link href={`vacancy/${vacancy.id}`}><FaInfoCircle className='vacancy__card__footer__icon' /></Link>
              </div>
            </div>
          ))}
        </div>
      )}

      <div className="pagination">
        <button onClick={() => setPage((prevPage) => Math.max(prevPage - 1, 1))} disabled={page === 1}>
          Назад
        </button>
        <span>{page} / {totalPages}</span>
        <button onClick={() => setPage((prevPage) => Math.min(prevPage + 1, totalPages))} disabled={page === totalPages}>
          След
        </button>
      </div>
    </div>
  );
};